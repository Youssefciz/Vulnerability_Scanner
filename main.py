from flask import Flask, render_template, request, send_file
import asyncio
from scanner import scan_for_sql_injection, scan_for_xss, scan_for_directory_traversal, \
                    scan_for_http_header_injection, scan_for_command_injection, \
                    scan_for_sensitive_data_exposure, scan_for_unrestricted_file_upload
from report_generator import generate_html_report
import logging

app = Flask(__name__)

logging.basicConfig(filename="scan.log", level=logging.INFO)

async def run_scans(url):
    logging.info(f"Starting scan on {url}")
    vulnerabilities = []
    tasks = [
        scan_for_sql_injection(url),
        scan_for_xss(url),
        scan_for_directory_traversal(url),
        scan_for_http_header_injection(url),
        scan_for_command_injection(url),
        scan_for_sensitive_data_exposure(url),
        scan_for_unrestricted_file_upload(url),
    ]

    results = await asyncio.gather(*tasks)

    for result in results:
        if result:
            vulnerabilities.append(result)
            logging.info(f"Detected vulnerability: {result}")

    logging.info(f"Detected vulnerabilities: {vulnerabilities}")
    generate_html_report(vulnerabilities, url)
    logging.info("Scan complete.")
    return vulnerabilities

@app.route("/", methods=["GET", "POST"])
def dashboard():
    if request.method == "POST":
        url = request.form.get("url")
        asyncio.run(run_scans(url))
        return render_template("report.html", url=url)
    return render_template("index.html")

@app.route("/download_report")
def download_report():
    return send_file("templates/report.html", as_attachment=True)

if __name__ == "__main__": 
    app.run(debug=True)
